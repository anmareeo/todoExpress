{"version":3,"sources":["components/const.js","components/Input.js","components/ToDoItem.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["baseEndPoint","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","textField","SimpleModal","props","classes","startValue","editMode","hasOwnProperty","todo","text","React","useState","modalStyle","open","setOpen","setText","handleOpen","handleClose","IconButton","onClick","type","Modal","aria-labelledby","aria-describedby","onClose","style","className","id","TextField","label","variant","defaultValue","onChange","event","target","value","Button","color","method","_id","fetch","headers","body","JSON","stringify","then","httpResult","ok","Error","loadPage","catch","error","console","log","ToDoItem","Fragment","ListItem","ListItemText","primary","Divider","root","maxWidth","ToDoList","list","setList","json","result","useEffect","List","component","aria-label","map","item","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2589556.chunk.js","sourcesContent":["//these two constants are used to build API endpoints.\r\n\r\n// const baseEndPoint = \"http://localhost:3000\"\r\nconst baseEndPoint = 'https://cryptic-journey-62438.herokuapp.com'\r\nconst currentAPI = \"/api/v1\"\r\nexport {\r\n    baseEndPoint, currentAPI\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button'\r\nimport {baseEndPoint, currentAPI} from './const'\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 800,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  textField: {\r\n    width: 600,\r\n  },\r\n}));\r\n\r\nexport default function SimpleModal(props) {\r\n  const classes = useStyles();\r\n  let startValue = \"\"\r\n// default is false but if there is an item in props, we know it's to be edited and not added.\r\n  let editMode = false\r\n  if (props.hasOwnProperty(\"todo\")===true){\r\n    editMode = true\r\n    startValue=props.todo.text\r\n  }\r\n  // getModalStyle is not a pure function, we roll the style only on the first render\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [text, setText] = React.useState(startValue)\r\n\r\n\r\n\r\n  //in jsx on the return, use a terniary operator instead of an if statement....so edit mode?_____,_______.\r\n  // const handleDelete = () => {\r\n  // setOpen(true)\r\n  // }\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleSave = () => {\r\n    let method = \"POST\"\r\n    let id=\"\"\r\n  if (editMode===true){\r\n    method = \"PUT\"\r\n    id=`/${props.todo._id}`\r\n  }\r\nfetch(`${baseEndPoint}${currentAPI}/items${id}`,{\r\n  method: method, \r\n   headers: {\r\n          'Content-Type': \"application/json\"\r\n        },\r\n        body: JSON.stringify({text: text})\r\n\r\n      })\r\n      .then(httpResult => {\r\n\r\n        if (!httpResult.ok) {\r\n          throw new Error(\"Failed to fetch.\")\r\n        }\r\n        handleClose()\r\n        props.loadPage()\r\n      }) \r\n      .catch(error => {\r\n\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div> \r\n    {\r\n    editMode===true?(\r\n          <IconButton onClick = {handleOpen}>\r\n        <EditIcon></EditIcon>\r\n      </IconButton>\r\n\r\n    ):(\r\n         <button type=\"button\" onClick={handleOpen}>\r\n        Add Task\r\n      </button>\r\n    )\r\n    }\r\n\r\n    \r\n    \r\n\r\n     \r\n      <Modal\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <h2 id=\"simple-modal-title\">Do it!</h2>\r\n          <TextField\r\n          label=\"Task\"\r\n          id=\"outlined-start-adornment\"\r\n          className={classes.textField}\r\n          variant=\"outlined\" \r\n          defaultValue = {text}\r\n          onChange = {(event)=>{setText(event.target.value)}}>\r\n\r\n          </TextField>\r\n          <div>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>Save</Button>\r\n          <Button variant=\"contained\" color=\"primary\"onClick={handleClose} >Cancel</Button>\r\n\r\n\r\n          \r\n          \r\n          </div>\r\n\r\n \r\n         \r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from './Input'\r\nimport {baseEndPoint, currentAPI} from './const'\r\n\r\nexport default function ToDoItem(props) {\r\n  \r\nconst handleDelete = ()=>{\r\n   let method = \"DELETE\"\r\n\r\n  fetch(`${baseEndPoint}${currentAPI}/items/${props.todo._id}`,{\r\n    method: method, \r\n     headers: {\r\n            'Content-Type': \"application/json\"\r\n          },\r\n         \r\n  \r\n        })\r\n        .then(httpResult => {\r\n  \r\n          if (!httpResult.ok) {\r\n            throw new Error(\"Failed to fetch.\")\r\n          }\r\n         props.loadPage()\r\n        }) \r\n        .catch(error => {\r\n  \r\n          console.log(error)\r\n        })\r\n    }\r\n  \r\n\r\n  \r\n  // fetch for delete here\r\n  \r\n  return (\r\n   <React.Fragment>\r\n      <ListItem>\r\n        <ListItemText primary={props.todo.text} />\r\n        <Input loadPage={props.loadPage} todo={props.todo}></Input>\r\n      <IconButton onClick = {handleDelete}>\r\n        <DeleteIcon></DeleteIcon>\r\n      </IconButton>\r\n\r\n      </ListItem>\r\n      <Divider />\r\n   </React.Fragment>      \r\n  );\r\n}\r\n","import React from 'react'\r\nimport ToDoItem from './ToDoItem'\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport {baseEndPoint, currentAPI} from './const'\r\nimport Input from './Input'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    'text-align': 'center'\r\n  },\r\n}));\r\nexport default function ToDoList() {\r\n  const classes = useStyles();\r\n  let [list, setList] = React.useState([])\r\n  const loadPage = () => {\r\n\r\n    fetch(`${baseEndPoint}${currentAPI}/items`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          'Content-Type': \"application/json\"\r\n        }\r\n\r\n      })\r\n      .then(httpResult => {\r\n\r\n        if (!httpResult.ok) {\r\n          throw new Error(\"Failed to fetch.\")\r\n        }\r\n        return httpResult.json()\r\n      })\r\n      .then(result => {\r\n\r\n        setList(result)\r\n      })\r\n      .catch(error => {\r\n\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  React.useEffect(\r\n    loadPage, []\r\n  )\r\n\r\n  return ( \r\n  <div>\r\n    <div className = 'Container'>\r\n    <div className = 'List'>\r\n    <h1> To-Do List </h1>\r\n    \r\n    <Input loadPage={loadPage}></Input>\r\n    <List component = \"nav\"\r\n    className = {\r\n      classes.root\r\n    }\r\n    aria-label = \"mailbox folders\" >\r\n      {\r\n        list.map(item=>{\r\n          return(\r\n            <ToDoItem loadPage={loadPage} todo={item}></ToDoItem>\r\n          )\r\n        })\r\n\r\n      }\r\n\r\n    </List> \r\n    </div>\r\n    </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n","import React from 'react';\nimport ToDoList from './components/ToDoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <ToDoList></ToDoList>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}